I. Предварительная подготовка

Изучить tutorial: https://docs.djangoproject.com/en/5.0/
Учить только:
Part 1: Requests and responses
Part 2: Models and the admin site
Part 3: Views and templates
Part 4: Forms and generic views
Part 5: Testing
Part 6: Static files
Part 7: Customizing the admin site
Part 8: Adding third-party packages

Примечание: Advanced Tutorials изучать не нужно.


II. Общие положения.
1. Готовиться работать без интернета, только по Zeal.

2. База - это база данных. Начинаем с с базы, т.е. с базы данных.
А самая базовая модель - пользователь (т.к. применяется много где).
Начинаем с базы данных (model), затем над ней делаем надстройку (view, templates и т.п.).

3. Подключите и задействуйте какой-нибудь один шрифт.

4. Дизайн очень важен (за него дается 25 % баллов). Без дизайна
можно претендовать только на 4.

Поэтому делать красиво (с футером, по возможности пагинацией).

Сообщения пользовтелю (которые без перезагрузки страницы) и слайдер - с анимацией.

III. Один из вариантов стратегии

1. Схема базы данных.
Есть товар.
Есть пользователь.
Есть отобранные пользователем товары.
Есть заказ.

Товар        -|-------||- Отобранный товар
Заказ        -|-------||- Отобранный товар
Пользователь -|-------||- Отобранный товар

Если у отобранного пользователем товара заказ пустой - это корзина данного пользователя.
Т.е. корзина виртуальна. По ТЗ системный администратор
не должен править корзину. Поэтому отдельную сущность "корзина"
выделять не обязательно.

По ТЗ в корзине - товары. И в заказе - товары.
И в корзину, и в заказ пользователь товары когда-то отбирал.
Поэтому они так и названы - отобранные товары.


2. Учет товаров

При заказе товара - уменьшить доступный к заказу остаток.
При отмене заказа - увеличить остаток.
ТЗ об этом ничего не говорит. Поэтому мы вправе самостоятельно
обозначить момент.

Вариантов у нас еще два:
1. При подтверждении заказа.
2. При помещении товара в корзину.

Уменьшение запасов при подтверждении заказа нам будет реализовать сильно сложнее,
потому что это делается в админке.
Придется либо писать admin action (https://docs.djangoproject.com/en/5.0/ref/contrib/admin/actions/),
либо обрабатывать сигналы. И то, и то требует дополнительного изучения.

Уменьшение запасов при помещении в корзину не совсем логично: пользователь еще
не сформировал заказ.


IV. Модель пользователя

Пользоватеь есть в Django "из коробки".
Если вы решите сделать MVP на основе модели пользователя из коробки,
у вас не будет времени позже изменить ее на самописную (слишком во многих местах
придется править код).

Самописная модель пользователя делается не слишком трудоемко.

1. Создать пользователя (унаследоваться от AbstractUser).
https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#substituting-a-custom-user-model
Не хватает двух полей: отчества и согласия.

2. Форма для авторизации в Django есть из коробки.
Но поля называются по-другому.

Поэтому надо подменить поля. Сделать это можно "костылем":
Это недокументированная возможность, но если идти по
восходящей линии наследования, то увидим add_prefix.
Да, он предназначен для добавления префикса, но способен
и подменить поле целиком.

FIELD_NAME_MAPPING = {
    'username': 'login',
}

class LoginForm(AuthenticationForm):

    def add_prefix(self, field_name):
        field_name = FIELD_NAME_MAPPING.get(field_name, field_name)
        return super().add_prefix(field_name)

3. Формы для регистрации пользователя в Django нет.
Делать ее с нуля. Причем, не ModelForm, а именно с нуля.
Если делать ModelForm, на форме будет username, что нарушит ТЗ.

4. В settings.py необходимо прописать модель пользователя: AUTH_USER_MODEL
https://docs.djangoproject.com/en/5.0/ref/settings/#auth-user-model


V. Верстка на основе Bootstrap.

VI. CSS.
У вас должен быть файл CSS.
Даже если он совсем маленький, пусть он будет.



V. Опасности

1. При копировании из Zeal
